var documenterSearchIndex = {"docs":
[{"location":"#DiffusionFlux","page":"Home","title":"DiffusionFlux","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DiffusionFlux is a package for the calculation of diffusion flux. The packge implements different models for the calculation of diffusion fluxes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for DiffusionFlux.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, use the following commands in the julia REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"DiffusionFlux\")","category":"page"},{"location":"#Models","page":"Home","title":"Models","text":"","category":"section"},{"location":"#Fickian-diffusion","page":"Home","title":"Fickian diffusion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"j_k = -D_km M_k fracdc_kdx","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the above eqaution j_k is the mass flux (kg/m^2s), D_km is the diffusion coefficient of species k in the rest of the mixture (m^2/s), M_k is the molecular weight (kg/mol), c_k is the concentration of species k (mol/m^3), and x is the spatial coordinate.  The flux calculated using the above formulation does not ensure that sum j_k = 0. Therefore the fluxes are corrected according to ","category":"page"},{"location":"","page":"Home","title":"Home","text":"j_k^prime = j_k - Y_k j_corr","category":"page"},{"location":"","page":"Home","title":"Home","text":"where","category":"page"},{"location":"","page":"Home","title":"Home","text":"j_corr = sum j_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"Two different formulations are available for the calculation of species flux through porous media","category":"page"},{"location":"#Modified-Fickian-(porous-media-flow)","page":"Home","title":"Modified Fickian (porous media flow)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"j_k = M_k left(-D^e_k fracdc_kdx - fracB_g c_kmufracpdxright)","category":"page"},{"location":"","page":"Home","title":"Home","text":"frac1D^e_k = frac1D^e_kKn + frac1D^e_km","category":"page"},{"location":"","page":"Home","title":"Home","text":"D^e_kkn = fracepsilontauD_kKn","category":"page"},{"location":"","page":"Home","title":"Home","text":"D^e_km = fracepsilontauD_km","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the above equations, epsilon is the porosity, tau is the tortuosity, B_g is the permeability  (m^2), p is the pressure (Pa), and D_kKn is the Knudsen diffusion coefficient of species k (m^2/s).","category":"page"},{"location":"#Dusty-Gas-Model-(porous-media-flow)","page":"Home","title":"Dusty Gas Model (porous media flow)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"j_k = -M_kleft sum_l=1^N_g D_kl^mathrmDGM fracdc_ldx + left( sum_l=1^N_gfracD_kl^mathrmDGMc_lD_lKn right)fracB_gmu fracdpdx  right","category":"page"},{"location":"","page":"Home","title":"Home","text":"D_kl^mathrmDGM = H^-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"h_kl = left frac1D^e_kKn + sum_j ne k fracX_jD^e_kj right delta_kl + (delta_kl-1)fracX_kD^e_kl","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the above equation X_k is the mole fraction of species k, D^e_kj is the effective binary diffusion coeffcients, and delta_kl is the kronecker delta.","category":"page"},{"location":"#General-interfaces","page":"Home","title":"General interfaces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#DiffusionFlux.Properties","page":"Home","title":"DiffusionFlux.Properties","text":"A structure to define the porous medis properties \n\nϵ : porosity\nτ : tortuosity\npore_dia : pore diameter \npart_dia : particle diameter\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionFlux.WorkSpace","page":"Home","title":"DiffusionFlux.WorkSpace","text":"Non allocating array for calculation of fluxes \n\nDkne : Array for Knudsen diffusion coeffcients\nDije : Array for binary diffusion coeffcients\nDklDGM : Array space for use in DGM \nDkm : Array for storing diffusion coeffcients of k in the rest of the mixture\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionFlux.D_Kn-Tuple{Any, Properties, Any}","page":"Home","title":"DiffusionFlux.D_Kn","text":"Function to calcuate the Knudsen diffusion coeffcients \n\nUsage\n\nD_Kn(thermo_obj, pm::Properties, T)\n\nthermo_obj : SpeciesThermProperties (Refer IdealGas)    \npm : Struct of the type Properties    \nT : Temperature (K)\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionFlux.KozeneyCarman-Tuple{Properties}","page":"Home","title":"DiffusionFlux.KozeneyCarman","text":"Function to calculate the permeability using Kozeney Carman relationship\n\nUsage\n\nKozeneyCarman(pm::Properties)\n\npm: Struct of the type Properties    \n\n\n\n\n\n","category":"method"},{"location":"#DiffusionFlux.effective_coefficients!-Tuple{WorkSpace, Properties, Any, Float64, Float64, Array{Float64}}","page":"Home","title":"DiffusionFlux.effective_coefficients!","text":"Function to calculate binary diffusion coeffcients and Knudsen diffusion coeffcients, which are required for the evaluation of DGM fluxes\n\nUsage\n\neffectivecoefficients!(dgmobj::WorkSpace, pm::Properties, sp_trd, p::Float64, T::Float64 ,molwts::Array{Float64})\n\ndgm_obj : A struct of the type WorkSpace which stores the diffusion coeffcients matrix\npm : Porous media properties (struct of the type Properties)\nsptrd : Array of Species transport data, which is obtained by calling createtransport_data of TransportProperties\np : pressure in (Pa)\nT : Temperature (K)\nmolwts : molecular weights vector \n\n\n\n\n\n","category":"method"},{"location":"#DiffusionFlux.flux_dgm!-Union{Tuple{T}, Tuple{Array{Vector{T}, 1}, Matrix{T}, Properties, WorkSpace, Any, Array{T}, T, T}} where T","page":"Home","title":"DiffusionFlux.flux_dgm!","text":"Function to calculate the mass fluxes (kg/m^2-s) at the interface between two cells using DGM  The fluxes at the boundary cells are not evaluated in this function. If There are n cells, there will be n-1 internal cell faces \n\nUsage\n\nfluxdgm!(jks::Array{Array{T,1},1}, C::Array{Array{T,1},1}, pm::Properties, dgmobj::WorkSpace , molwts::Array{T}, Temp::T, δ::T)\n\njks : vector{vector} for storing the fluxes jks[n] stands for the flux at the interface between n and (n+1)th cell\nC : vector{vector} concentrations in all cells \npm : Porous media properties (struct of the type Properties)\ndgm_obj : A struct of the type WorkSpace which stores the diffusion coeffcients matrix\nsptrdata : Array of Species transport data, which is obtained by calling createtransportdata of TransportProperties\nmolwts : vector of molecular weights\nTemp : Temperature (K)\nδ : distance between cell centers \n\n\n\n\n\n","category":"method"},{"location":"#DiffusionFlux.flux_ficks!-Union{Tuple{T}, Tuple{Array{T}, Array{T}, Array{T}, Array{T}, Any, T}} where T","page":"Home","title":"DiffusionFlux.flux_ficks!","text":"Function to calculate the diffusion fluxes in Kg/m^2-s using Ficks law. The fluxes are corrected to  ensure that the sum is zero \n\nUsage\n\nflux_ficks!(jks::Array{T}, Dkm::Array{T} ,C1::Array{T}, C2::Array{T}, δ::T)\n\njks : vector of fluxes \nC1 : concentration vector\nC2 : concentration vector\nδ  : distance between the cell centers  \n\n\n\n\n\n","category":"method"},{"location":"#DiffusionFlux.flux_interface!-Union{Tuple{T}, Tuple{Vector{T}, Any, Any, WorkSpace, Array{T}, T}} where T","page":"Home","title":"DiffusionFlux.flux_interface!","text":"Function to calcuate the mass flux (kg/m^2-s) at the inteface between flow channel and porous media. The pressure driven flux is assumed to be negligible at the inteface \n\nUsage\n\ninterfaceflux!(jks::Array{T,1},Cch, Cpm, dgmobj::WorkSpace, molwts::Array{T}, Temp::T, δ::T)\n\njks : Storage for species flux (1D Array)\nC_ch : concentration in the flow channel\nC_pm : concentration in the porous media\ndgm_obj : Diffusion matrix for DGM flux calculations\nmolwts  : vector of molecular weights\nTemp : Temperature (K)\nδ   : distance between the cell centers \n\n\n\n\n\n","category":"method"},{"location":"#DiffusionFlux.flux_porous_media_fick!-Union{Tuple{T}, Tuple{Array{Vector{T}, 1}, Array{Vector{T}, 1}, Properties, Any, WorkSpace, Array{T}, T, T}} where T","page":"Home","title":"DiffusionFlux.flux_porous_media_fick!","text":"Function to calculate the mass fluxes (kg/m^2-s) at the interface between two cells using modified Fickian model  The fluxes at the boundary cells are not evaluated in this function. If There are n cells, there will be n-1 internal cell faces \n\nUsage\n\nfluxporousmediafick!(jks::Array{Array{T,1},1}, C::Array{Array{T,1},1}, pm::Properties, sptr_data, ws::WorkSpace , molwts::Array{T}, Temp::T, δ::T)\n\njks : vector{vector} for storing the fluxes jks[n] stands for the flux at the interface between n and (n+1)th cell\nC : vector{vector} concentrations in all cells \npm : Porous media properties (struct of the type Properties)\nsptrdata : Array of Species transport data, which is obtained by calling createtransportdata of TransportProperties\nws : A struct of the type WorkSpace which stores the diffusion coeffcients matrix\nmolwts : vector of molecular weights\nTemp : Temperature (K)\nδ : distance between cell centers \n\n\n\n\n\n","category":"method"}]
}
